from enum import Enum

class PromptVersion(Enum):
    V0 = "original"
    V1 = "task1"
    V2 = "task3"
    V2_1 = "task3_1"

class PromptManager:
    # 시스템 프롬프트
    SYSTEM_PROMPTS = {
        PromptVersion.V0: '''You are a helpful AI assistant. Please answer the user's questions kindly. \
            당신은 한국의 전통 문화와 역사, 문법, 사회, 과학기술 등 다양한 분야에 대해 잘 알고 있는 유능한 AI 어시스턴트 입니다. 사용자의 질문에 대해 친절하게 답변해주세요. \
            단, 동일한 문장을 절대 반복하지 마시오.''',

        PromptVersion.V1: '''You are a helpful AI assistant. Please answer the user's questions kindly. \
            당신은 한국의 전통 문화와 역사, 문법, 사회, 과학기술 등 다양한 분야에 대해 잘 알고 있는 유능한 AI 어시스턴트 입니다. 사용자의 질문에 대해 친절하게 답변해주세요. \
            단, 동일한 문장을 절대 반복하지 마시오.''',

        PromptVersion.V2: (
            "You are a helpful AI assistant. Please answer the user's questions kindly. "
            "당신은 도움이 되는 어시스턴트입니다. 당신은 한국의 전통 문화와 역사, 문법, 사회, 과학기술 등 다양한 분야에 대해 잘 알고 있는 유능한 AI 어시스턴트 입니다. "
            "사용자의 질문에 대해 친절하게 답변해주세요. 답변은 정확해야하고 틀리면 안됩니다. 그리고 동일한 문장을 절대 반복하지 마시오. "
            "반드시 키워드가 정답이 아닐 수 있습니다."
        ),

        PromptVersion.V2_1: (
            "You are a helpful AI assistant. Please answer the user's questions kindly. "
            "당신은 도움이 되는 어시스턴트입니다. 당신은 한국의 전통 문화와 역사, 문법, 사회, 과학기술 등 다양한 분야에 대해 잘 알고 있는 유능한 AI 어시스턴트 입니다. "
            "사용자의 질문에 대해 친절하게 답변해주세요. 반드시 키워드가 정답이 아닐 수 있습니다. 그리고 동일한 문장을 절대 반복하지 마시오. "
        )
    }

    # 질문 타입별 지시 정의
    TYPE_INSTRUCTIONS = {
        PromptVersion.V0: {
            "선다형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "주어진 보기 중에서 가장 적절한 답을 숫자로만 응답하시오.\n\n"
                "[예시]\n"
                "질문: 다음 한국의 전통 놀이 중 '조선시대'에 행한 놀이는?\n"
                "1) 주사위 놀이\n"
                "2) 검무\n"
                "3) 격구\n"
                "4) 영고\n"
                "5) 무애무\n"
                "답변: 3"
            ),
            "서술형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "질문에 대한 답변을 완성된 문장으로 서술하시오.\n\n"
                "[예시]\n"
                "질문: 대한민국의 행정구역 체계를 서술하세요.\n"
                "답변: 대한민국의 행정구역은 여러 종류의 지역 단위로 나뉘어 구성되어 있으며, 먼저 특별시와 광역시부터 살펴볼 수 있다. 특별시로는 수도인 서울특별시가 있으며, 광역시에는 인천광역시, 부산광역시, 대전광역시, 광주광역시, 대구광역시, 울산광역시 등이 포함된다. 이 외에도 대한민국은 일반 도 단위로 6개의 도를 두고 있는데, 그 이름은 경기도, 충청북도, 충청남도, 전라남도, 경상북도, 경상남도로 구성되어 있다. 특별한 자치권을 부여받은 도인 특별자치도로는 제주특별자치도, 전북특별자치도, 강원특별자치도가 있다. 마지막으로 특별자치시로는 세종특별자치시가 존재한다."
            ),
            "단답형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "질문에 대한 답을 2단어 이내로 간단히 답하시오.\n\n"
                "[예시]\n"
                "질문: 조선 후기의 실학 사상가로 목민심서를 쓴 인물은?\n"
                "답변: 정약용"
            ),
            "교정형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "주어진 문장이 올바른지 판단하고, 틀린 경우 올바르게 교정하여 \"~가 옳다.\" 형태로 답변하고, 그 이유를 설명하시오.\n\n"
                "[예시]\n"
                "질문: 다음 문장에서 어문 규범에 부합하지 않는 부분을 찾아 고치고, 그 이유를 설명하세요.\n\"오늘은 퍼즐 마추기를 해 볼 거예요.\"\n"
                "답변: \"오늘은 퍼즐 맞추기를 해 볼 거예요.\"가 옳다. '제자리에 맞게 붙이다, 주문하다, 똑바르게 하다, 비교하다' 등의 뜻이 있는 말은 '마추다'가 아닌 '맞추다'로 적는다."
            ),
            "선택형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "주어진 보기들 중에서 가장 적절한 것을 선택하여 \"~가 옳다.\" 형태로 답변하고, 그 이유를 설명하시오.\n\n"
                "[예시]\n"
                "질문: \"나는 그를 본 적이 있음을 {기억해냈다/기억해 냈다}.\" 가운데 올바른 것을 선택하고, 그 이유를 설명하세요.\n"
                "답변: \"나는 그를 본 적이 있음을 기억해 냈다.\"가 옳다. '기억해 냈다'는 '기억하-+-아+냈다'의 구성이다. 이처럼 '본용언+-아/-어+보조 용언' 구성인 경우 본용언과 보조 용언을 붙여 쓰는 것이 허용되지만, 이러한 구성을 갖더라도 앞말이 3음절 이상의 합성어나 파생어라면 보조 용언을 붙여 쓰는 것이 허용되지 않는다. '기억하다'는 '기억'과 '-하다'가 결합한 파생어이며 '기억해'는 3음절이다. 따라서 '기억해'와 '냈다'는 띄어 써야 한다."
            )
        },

        PromptVersion.V1: {
            "선다형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "주어진 보기 중에서 가장 적절한 답을 숫자로만 응답하시오.\n\n"
            ),
            "서술형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "질문에 대한 답변을 완성된 문장으로 서술하시오.\n\n"
            ),
            "단답형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "질문에 대한 답을 2단어 이내로 간단히 답하시오.\n\n"
            ),
            "교정형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "주어진 문장이 올바른지 판단하고, 틀린 경우 올바르게 교정하여 \"~가 옳다.\" 형태로 답변하고, 그 이유를 설명하시오.\n\n"
            ),
            "선택형": (
                "[질문]을 잘 읽고 답변을 생성하시오. 문제를 그대로 출력하지 마시오.\n"
                "[지침]\n"
                "주어진 보기들 중에서 가장 적절한 것을 선택하여 \"~가 옳다.\" 형태로 답변하고, 그 이유를 설명하시오.\n\n"
            )
        },

        PromptVersion.V2: {
            "선다형": (
                "[지시사항] 질문을 잘 읽고 주어진 보기 중에서 정답을 숫자로만 답변하시오. 문제를 그대로 출력하지 마시오."
            ),
            "서술형": (
                "[지시사항] 질문을 잘 읽고 300자 ~ 500자 이내로 완성된 서술형으로 답변하세요. 최대한 자세히 적되, 핵심 단어를 놓치지 말고 정확하게 사실만 답하여야합니다. 그리고 문제를 그대로 출력하지 마시오."
            ),
            "단답형": (
                "[지시사항] 질문을 잘 읽고 단답형으로 답하시오. 문제를 그대로 출력하지 마시오."
            )
        },

        PromptVersion.V2_1: {
            "선다형": (
                "[지시사항] 질문을 잘 읽고 주어진 보기 중에서 정답을 숫자로만 답변하시오. 문제를 그대로 출력하지 마시오."
            ),
            "서술형": (
                "[지시사항] 질문을 잘 읽고 500자 이내로 완성된 서술형으로 답변하세요. 최대한 자세히 적되, 핵심 단어를 놓치지 말고 정확하게 사실만 답하여야합니다. 그리고 문제를 그대로 출력하지 마시오."
            ),
            "단답형": (
                "[지시사항] 질문을 잘 읽고 단답형으로 답하시오. 문제를 그대로 출력하지 마시오."
            )
        }
    }

    @classmethod
    def get_system_prompt(cls, version: PromptVersion) -> str:
        """지정된 버전의 시스템 프롬프트 반환"""
        return cls.SYSTEM_PROMPTS.get(version, cls.SYSTEM_PROMPTS[PromptVersion.V1])

    @classmethod
    def get_type_instructions(cls, version: PromptVersion) -> dict[str, str]:
        """지정된 버전의 타입별 instruction 반환"""
        return cls.TYPE_INSTRUCTIONS.get(version, cls.TYPE_INSTRUCTIONS[PromptVersion.V1])

    @classmethod
    def get_instruction_for_type(cls, version: PromptVersion, question_type: str) -> str:
        """특정 버전과 질문 타입에 대한 instruction 반환"""
        type_instructions = cls.get_type_instructions(version)
        return type_instructions.get(question_type, "")
